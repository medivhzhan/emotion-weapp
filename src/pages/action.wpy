<template>
  <view class="action">
    <camera bindstop="cameraStoped" binderror="fetchCameraScope" device-position="{{ position || 'front' }}" flash="auto" class="camera">
      <cover-view class="emotion-name">
        <cover-view class="title">{{ emotions[index].name }}</cover-view>
        <cover-view class="tips">{{ emotions[index].desc }}</cover-view>
      </cover-view>
    </camera>
    <progress active active-mode="forwards" percent="{{ percent }}" stroke-width="5" activeColor="#69c3aa" backgroundColor="#ccc" />
    <view class="btn-group">
      <button @tap="reverseCamera" class="btn" hover-class="btn-hover">
        <image src="/images/reverse.svg" mode="aspectFill" />
      </button>
      <button @tap="takePhoto" class="btn btn-action" hover-class="btn-hover">
        <image src="/images/action.svg" mode="aspectFill" />
      </button>
      <button disabled="{{ !current }}" @tap="currentPreview" class="btn" style="padding: 0" hover-class="btn-hover">
        <image src="{{ current }}" mode="aspectFill" />
      </button>
    </view>
    <canvas class="canvas" style=" width: {{ canvas.width }}px;height:{{ canvas.height }}px;" canvas-id="action-canvas" />
  </view>
</template>
<script>
// 表演页面
import wepy from 'wepy'
import { BaseURL } from '../config'
import qiniu from '../qiniu'

export default class Action extends wepy.page {
  config = {
    disableScroll: true,
    enablePullDownRefresh: false,
    navigationBarTitleText: '开始表演'
  }

  data = {
    position: 'front', // 摄像头位置 front | back
    emotions: [], // 表情
    current: '', // 当前照片地址
    index: 0, // 当前拍照进度索引
    // 绘图相关设定
    canvas: {
      points: [], // 照片画放在canvas上的位置
      x: 0, // X轴起点
      y: 0, // Y轴起点
      margin: 5, // 外边距
      inWidth: 0, // 照片在canvas上的宽度
      inHeight: 0, // 照片在canvas上的高度
      num: 3, // 每排存放张数
      width: 250, // 画布宽度
      height: 320, // 画布高度
      ctx: {} // canvas 画布实例
    }
  }

  methods = {
    // 拍照
    takePhoto() {
      wepy.showLoading({ title: '沉醉中 ...', mask: true })
      const camera = wepy.createCameraContext()
      if (this.index === 5) this.drawQRCode()
      camera.takePhoto({
        quality: 'low', // high | normal | low
        success: res => {
          this.current = res.tempImagePath
          this.drawInCanvas(res.tempImagePath, () => {
            this.index++ // 进入下一个任务
            this.$apply()
            if (this.complete()) {
              // 保存图片
              wepy.canvasToTempFilePath({
                x: 0,
                y: 0,
                quality: 0.5,
                canvasId: 'action-canvas',
                success: res => {
                  this.submit(res.tempFilePath)
                },
                fail: err => {
                  wepy.hideLoading()
                }
              })
            } else {
              wepy.hideLoading()
            }
          })
        },
        fail: err => {
          this.restoreRemind()
        }
      })
    },

    // 预览当前照片
    currentPreview() {
      return false // dev: 预览会导致摄像头前置转后置
      wepy.previewImage({
        urls: [this.current] // 需要预览的图片http链接列表
      })
    },

    // 获取摄像机权限
    fetchCameraScope() {
      const duration = 1500
      wepy.showToast({
        duration,
        title: '同意授权才能带你装逼带你飞',
        icon: 'none'
      })

      setTimeout(() => {
        wepy.openSetting({
          success: res => {
            if (res.authSetting['scope.camera']) {
              wepy.redirectTo({ url: '/pages/action' })
            }
          }
        })
      }, duration + 500)
    },

    // 摄像头意外终止
    cameraStoped() {
      this.restoreRemind()
    },

    // 反转镜头
    reverseCamera() {
      const position = this.position === 'front' ? 'back' : 'front'
      wepy.redirectTo({ url: `/pages/action?position=${position}` })
    }
  }

  // 提醒重启
  restoreRemind() {
    // 重启小程序
    // wepy.reLaunch({
    //   url: `/pages/action?position=${this.position}`
    // });
    wepy.showToast({
      title: '开了个小差 重启试试吧',
      icon: 'none'
    })
  }

  // 把照片画到画布
  drawInCanvas(path, callback) {
    const point = this.canvas.points[this.index]
    if (!point) return

    // 画图
    this.canvas.ctx.drawImage(
      path,
      point.x,
      point.y,
      this.canvas.inWidth,
      this.canvas.inHeight
    )

    const emotion = this.emotions[this.index]
    if (!emotion) return
    // 写字
    this.canvas.ctx.fillText(
      emotion.name,
      point.x + this.canvas.inWidth / 2,
      point.y + this.canvas.inHeight - 5
    )

    this.canvas.ctx.draw(true, callback)
  }

  // 重置拍照
  reset() {
    this.index = this.canvas.x = this.canvas.y = 0
    this.canvas.ctx = wepy.createCanvasContext('action-canvas')
    // 填充背景颜色
    this.canvas.ctx.setFillStyle('#fff')
    this.canvas.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)

    this.canvas.ctx.setFontSize(12)
    this.canvas.ctx.setTextAlign('center')
  }

  // 上传图片到七牛云
  uploadFile(filePath) {
    return new Promise(async resolve => {
      const tok = await this.$parent.uptoken()
      qiniu.upload(
        filePath,
        res => {
          resolve(res)
          // 每个文件上传成功后,处理相关的事情
          // 其中 info 是文件上传成功后，服务端返回的json，形式如
          // {
          //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
          //    "key": "gogopher.jpg"
          //  }
          // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
        },
        error => {
          // console.log('error: ' + error);
        },
        {
          region: tok.region,
          domain: tok.domain, // // bucket 域名，下载资源时用到。如果设置，会在 success callback 的 res 参数加上可以直接使用的 ImageURL 字段。否则需要自己拼接
          // key: 'customFileName.jpg', // [非必须]自定义文件 key。如果不设置，默认为使用微信小程序 API 的临时文件名
          uptoken: tok.token // 由其他程序生成七牛 uptoken
        },
        res => {
          // processes
          // console.log('上传进度', res.progress);
          // console.log('已经上传的数据长度', res.totalBytesSent);
          // console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend);
        }
      )
    })
  }

  async submit(filePath) {
    wepy.showLoading({ title: '专家评审中...', mask: true })

    const data = await this.uploadFile(filePath)
    // 上传数据
    wepy.request({
      method: 'POST',
      url: `${BaseURL}/auth/actions`,
      data: data,
      header: await this.$parent.authHeader(),
      success: res => {
        this.reset()
        wepy.showLoading({ title: '瞻仰中 ...', mask: true })
        if (res.data.pass) {
          // 评价通过
          // wepy.redirectTo({ url: `/pages/preview?action=${res.data.id}` });
          wepy.previewImage({
            urls: [res.data.src], // 需要预览的图片http链接列表
            complete: () => {
              wepy.hideLoading()
            }
          })
        } else {
          // 评价失败
          wepy.hideLoading()

          if (res.data.message) this.showMessage(res.data.message)
        }
      },

      fail: err => {
        this.reset()

        // dev: 上传数据失败
        wepy.hideLoading()
      }
    })
  }

  // 评价失败 展示失败原因
  // dev: should delete with go code
  showMessage(content) {
    wepy.showModal({
      content,
      showCancel: false,
      title: '评审不通过',
      confirmText: '再演一次',
      success: res => {
        if (res.confirm) {
          // 用户点击确定
          this.reset()
        }
      }
    })
  }

  // 判断是否拍照完成
  complete() {
    return this.index >= this.emotions.length
  }

  computed = {
    // 计算进度百分比
    percent() {
      return Math.round(this.index * 100 / this.emotions.length)
    }
  }

  // dev: 放到全局
  // 计算照片的位置信息
  fetchPoints() {
    const res = wepy.getSystemInfoSync()

    const num = 8 // 图片数量 不包括二维码
    const margin = 5 // 外边距
    const cloNum = 3 // 列数
    const rowNum = Math.ceil((num + 1) / cloNum) // 把二维码的空间算上

    const photoWidth = res.windowWidth
    const photoHeight = res.windowHeight * 80 / 100 // 高度百分比请于css保持一致
    this.canvas.inWidth = Math.round(
      (this.canvas.width - margin * (cloNum + 1)) / cloNum
    )
    this.canvas.inHeight = Math.round(
      this.canvas.inWidth / photoWidth * photoHeight
    )
    this.canvas.height = this.canvas.inHeight * rowNum + margin * (rowNum + 1)

    for (let i = 0; i < rowNum; i++) {
      for (let k = 0; k < cloNum; k++) {
        this.canvas.points.push({
          x: (k + 1) * margin + k * this.canvas.inWidth,
          y: (i + 1) * margin + i * this.canvas.inHeight
        })
      }
    }

    // set qrcode point
    const key = Math.ceil(num / 2)
    this.canvas.qrpoint = this.canvas.points.splice(key, 1)[0]
  }

  // 描绘二维码
  async drawQRCode() {
    if (!this.canvas.qrpoint.x === 0 && !this.canvas.qrpoint.y === 0) return
    const path = await this.$parent.getAppCode()
    this.canvas.ctx.drawImage(
      path,
      this.canvas.qrpoint.x,
      // this.canvas.qrpoint.y,
      this.canvas.qrpoint.y +
        Math.abs(this.canvas.inHeight - this.canvas.inWidth) / 2,
      this.canvas.inWidth,
      this.canvas.inWidth
    )
    // this.canvas.ctx.save();
    // this.canvas.ctx.setFontSize(6);
    // this.canvas.ctx.setFillStyle('#69c3aa');
    // this.canvas.ctx.fillText(
    //   '长按识别二维码',
    //   point.x + this.canvas.inWidth / 2,
    //   point.y + this.canvas.inHeight - 13
    // );
    // this.canvas.ctx.fillText(
    //   '试试你的演技值多少分',
    //   point.x + this.canvas.inWidth / 2,
    //   point.y + this.canvas.inHeight - 5
    // );
    // this.canvas.ctx.restore();

    this.canvas.ctx.draw(true)
  }

  onLoad(options) {
    if (options.position) {
      this.position = options.position
    }

    // dev: 放到全局
    wepy.request({
      method: 'GET',
      url: `${BaseURL}/emotions`,
      success: res => {
        if (res.data.emotions) {
          this.emotions = [...res.data.emotions]
          this.$apply()
        }
      }
    })

    this.reset()
    this.fetchPoints()
  }

  onShareAppMessage(res) {
    return this.$parent.shareAppMessage(this.$parent.globalData.appCode)
  }
}
</script>

<style lang="less">
@import '../variables';

.action {
  background: @white;
  position: relative;
  height: 100vh;
  width: 100%;
  overflow: hidden;
}

.canvas {
  position: absolute;
  top: 200%;
}

.camera {
  width: 100%;
  height: 80%; // 请于js保持一致
  position: relative;
}

.emotion-name {
  text-align: center;
  position: absolute;
  width: 100%;
  bottom: 5%;
}

.title {
  color: @green;
  padding: 40rpx;
  font-size: 24pt;
  font-weight: bold;
  text-align: center;
  letter-spacing: 20rpx;
}

.tips {
  color: @green;
  font-size: 16pt;
  text-align: center;
}
.btn-group {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.btn-group .btn {
  padding: 15rpx;
  height: 100rpx;
  width: 100rpx;
  border: solid 1rpx #ccc;
}

.btn-group .btn image {
  border-radius: 50%;
  height: 100%;
  width: 100%;
}

.btn-group .btn-action {
  padding: 20rpx;
  height: 150rpx;
  width: 150rpx;
  border: 15rpx solid #eee;
}
</style>

